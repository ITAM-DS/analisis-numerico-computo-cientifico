# Cuenta: 107882


Observa los resultados al ejecutar el programa.out y realiza lo siguiente:

a) Investiga por qué se usan "" en la línea que tiene include en main.c y en funciones.c en lugar de usar < >.

Porque definiciones.h no es una librería estándar de C, es una librería creada por el usuario. Además de que está en el mismo directorio donde está main.c y funciones.c.

b) Investiga el uso de static en la definición de variables externas de funciones.c.

"static" se usa como un modificador en la variables. este modificador le dice al compilador que una variable declarada como "static" durará toda la ejecución del programa, es decir, el "scope" de esa variable abarca desde su declaración hasta el final del programa.

c) Modifica el archivo funciones.c para que alojes e inicialices a las matrices matriz1, matriz2 y matriz_resultado con malloc y apuntadores. Modifica main.c para que llame a una función dentro del archivo funciones.c que inicialice y aloje a las matrices anteriores y llame a otra función para que las desaloje una vez hecha la multiplicación (usa free):

MODIFICACION ARCHIVO FUNCIONES.C:

double ** matriz1, **matriz2, **matriz_resultado;


void aloja_espacio_e_incializa_matrices(void){
	
	matriz_resultado =(double **) malloc (NUM_REN_MAT1*sizeof(double *));
	for(i=0;i<NUM_REN_MAT1;i++)
	   matriz_resultado[i] = (double *) malloc( NUM_COL_MAT2*sizeof(double));


	matriz1 = (double**) malloc(NUM_REN_MAT1*sizeof(double *));
	
	for(i=0;i<NUM_REN_MAT1;i++)
	   matriz1[i] = (double *) malloc( NUM_COL_MAT1*sizeof(double));

	matriz1[0][0]=0;
	matriz1[0][1]=1.5;
	matriz1[1][0]=4;
	matriz1[1][1]=-5;
	matriz1[2][0]=-1;
	matriz1[2][1]=2.5;

	matriz2 = (double**) malloc(NUM_REN_MAT2*sizeof(double *));
	
	for(i=0;i<NUM_REN_MAT2;i++)
	   matriz2[i] = (double *) malloc( NUM_COL_MAT2*sizeof(double));

	matriz2[0][0]=1;
	matriz2[0][1]=0;
	matriz2[0][2]=0;
	matriz2[1][0]=0;
	matriz2[1][1]=-1;
	matriz2[1][2]=1;

}

void libera_espacio(void){
	for(i=0;i<NUM_REN_MAT1;i++){
	   free(matriz1[i]);
	   free(matriz_resultado[i]);
	}
	free(matriz1);
	for(i=0;i<NUM_REN_MAT2;i++)
	   free(matriz2[i]);
	free(matriz2);
	free(matriz_resultado); 
}



ARCHIVO MAIN.C:

#include"definiciones.h"
int main(void){
    aloja_espacio_e_incializa_matrices();
    imprime_matrices();
    multiplica_matrices();
    imprime_matriz_resultado();
    libera_espacio();
return 0;
}



Investiga sobre LAPACK, BLAS y ATLAS y la subrutina de Fortran dgemm y reporta sobre esta investigación que realizas. Es una investigación corta que contiene principalmente una descripción sobre los paquetes anteriores y la subrutina.

BLAS (Basic Linear Algebra Subprograms). es una colección de operaciones aritméticas entre matrices y vecotres a un bajo nivel, como multiplicar un vector por un escalar, o multiplicar dos matrices y sumarlas con una tercera matriz. 
Hasta el momento se dispone de subrutinas de tres niveles:
Nivel 1, publicado en 1979, que se encarga de operaciones de vector por vector. Por ejemplo, la subrutina SAXPY, que sirve para sumar un múltiplo de un vector con otro vector.
Nivel 2, publicado en 1988, que se ocupa de operaciones de matriz con vector. POr ejemplo, la subrutina SGEMV, que sirve para sumar el producto de un múltiplo de una matriz por un vector, con un múltiplo de otro vector.
Nivel 3, publicado en 1990, que se dedica a operaciones entre matrices. POr ejemplo, SGEMM, que sirve para sumar un múltiplo de una matriz con un múltiplo del producto de otras dos matrices.


LAPACk (Linear Algebra Package) es una colección de subrutinas escritas en FORTRAN 77 para resolver problemas matemáticos comunes  que surgen a partir del modelamiento y que se enmarcan en el campo del álgebra lineal. Las subrutinas de LAPACK se basan en las llamadas a subrutinas más sencillas que se conocen como BLAS (Basic Linear Algebra Subprograms).
La construcción de LAPACK con base en las subrutinas de BLAS genera un alto nivel de estandarización, proporciona gran rapidez de cálculo y hace más fácil hacer un seguimiento cuando se presentan dificultades.
LAPACK incluye rutinas para resolver sistemas de ecuaciones lineales, sistemas de ecuaciones lineales por mínimos cuadrados, problemas de valores propios y problemas de valores singulares.

ATLAS (Automatically Tuned Linear Algebra Software) es una "buena" implementación de las interfaces de BLAS y también implementa subrutinas de operaciones comunes usadas en LAPACK.
La meta de los desarroladores de ATLAS es  generar una metodología para la generación automática de rutinas de algebra lineal de alto redimiento para los procesadores actuales. El proceso trabajará en los procesadores que tienen una Cache y unc compilador C razonables. Lo que se pretende es que ATLAS alcance  o exceda el performance de las rutinas de multiplicación de matrices de otros vendors. 

DGEMM (double precision, general matrices, matrix-matrix multiplication). Es una subrutina de BLAS, que se encuentra en en el Nivel 3: producto matriz-matriz
dgemm es producto matriz-matriz, matrriz general, real, doble precisión

Firma de la función en C:
void dgemm_(char *transaA, char *transaB,int *m,int *n,int *k,double *alpha,double *A,int *lda,double *B,int *ldb,double *beta,double *C,int *ldc);

Documentación:


 NAME
      DGEMM - perform one of the matrix-matrix operations   C :=
      alpha*op( A )*op( B ) + beta*C,

 SYNOPSIS
      SUBROUTINE DGEMM ( TRANSA, TRANSB, M, N, K, ALPHA, A, LDA,
                       B, LDB, BETA, C, LDC )

          CHARACTER*1  TRANSA, TRANSB

          INTEGER      M, N, K, LDA, LDB, LDC

          DOUBLE       PRECISION ALPHA, BETA

          DOUBLE       PRECISION A( LDA, * ), B( LDB, * ), C( LDC,
                       * )

 PURPOSE
      DGEMM  performs one of the matrix-matrix operations

 M      - INTEGER.
             On entry,  M  specifies  the number  of rows  of the
             matrix op( A )  and of the  matrix  C.  M  must  be
             at least  zero.  Unchanged on exit.

      N      - INTEGER.
             On entry,  N  specifies the number  of columns of the
             matrix op( B ) and the number of columns of the
             matrix C. N must be at least zero.  Unchanged on
             exit.

      K      - INTEGER.
             On entry,  K  specifies  the number of columns of the
             matrix op( A ) and the number of rows of the matrix
             op( B ). K must be at least  zero.  Unchanged on
             exit.

      ALPHA  - DOUBLE PRECISION.
             On entry, ALPHA specifies the scalar alpha.
             Unchanged on exit.

 ka is
      A      -
              DOUBLE PRECISION array of DIMENSION ( LDA, ka ), where
             k  when  TRANSA = 'N' or 'n',  and is  m  otherwise.
             Before entry with  TRANSA = 'N' or 'n',  the leading
             m by k part of the array  A  must contain the matrix
             A,  otherwise the leading  k by m  part of the array
             A  must contain  the matrix A.  Unchanged on exit.

      LDA    - INTEGER.
             On entry, LDA specifies the first dimension of A as
             declared in the calling (sub) program. When  TRANSA =
             'N' or 'n' then LDA must be at least  max( 1, m ),
             otherwise  LDA must be at least  max( 1, k ).
             Unchanged on exit.

 kb is
      B      -
              DOUBLE PRECISION array of DIMENSION ( LDB, kb ), where
             n  when  TRANSB = 'N' or 'n',  and is  k  otherwise.
             Before entry with  TRANSB = 'N' or 'n',  the leading
             k by n part of the array  B  must contain the matrix
             B,  otherwise the leading  n by k  part of the array
             B  must contain  the matrix B.  Unchanged on exit.

      LDB    - INTEGER.
             On entry, LDB specifies the first dimension of B as
             declared in the calling (sub) program. When  TRANSB =
             'N' or 'n' then LDB must be at least  max( 1, k ),

             otherwise  LDB must be at least  max( 1, n ).
             Unchanged on exit.

      BETA   - DOUBLE PRECISION.
             On entry,  BETA  specifies the scalar  beta.  When
             BETA  is supplied as zero then C need not be set on
             input.  Unchanged on exit.

      C      - DOUBLE PRECISION array of DIMENSION ( LDC, n ).
             Before entry, the leading  m by n  part of the array
             C must contain the matrix  C,  except when  beta  is
             zero, in which case C need not be set on entry.  On
             exit, the array  C  is overwritten by the  m by n
             matrix ( alpha*op( A )*op( B ) + beta*C ).

      LDC    - INTEGER.
             On entry, LDC specifies the first dimension of C as
             declared in  the  calling  (sub)  program.   LDC
             must  be  at  least max( 1, m ).  Unchanged on exit.

             Level 3 Blas routine.





