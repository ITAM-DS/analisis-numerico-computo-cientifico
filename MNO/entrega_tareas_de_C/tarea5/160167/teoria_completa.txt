#Tarea 5 By Ricardo Lastra

Observa los resultados al ejecutar el programa.out y realiza lo siguiente:

a) Investiga por qué se usan "" en la línea que tiene include en main.c y en funciones.c en lugar de usar < >.

La directiva #include existe en dos versiones. En una se pone el nombre de fichero entre comillas, en la otra entre paréntesis angulares (el signo menor y mayor como comillas).

1. #include "archivo.h"
2. #include <archivo.h>

La versión con los paréntesis angulares busca los ficheros en todos los directorios que se han especificado en la llamada al compilador  normalmente con la opción -I. Estos directorios se suelen rastrear por el fichero incluido en el orden en que aparecen en la línea de comando.

Cuando se incluye un fichero entre comillas, entonces el compilador busca este fichero primero en el mismo directorio que el fichero actualemente compilado y después en los demás directorios. Es decir, la versión con comillas se diferencia de la versión con paréntesis angulares únicamente por buscar primero en el directorio del fichero compilado. Tras no encontrarlo ahí actúa igual.

Esto muchas veces no es ninguna diferencia, ya que se suelen especificar todos los directorios en la línea de comando del compilador. Así no se suele dar el caso que se puede incluir un fichero con comillas pero no con paréntesis angulares.

Más significativo es el comportamiento ante ficheros con el mismo nombre en distintos directorios. En este caso la versión con comillas da preferencia sobre el fichero en el mismo directorio y esto suele ser el mejor acertado. Aunque sea preferible nombrar ficheros de forma única en un proyecto, es posible que no se pueda evitar tener dos ficheros con el mismo nombre cuando se incluyen varias bibliotecas de terceros.

De ahí se puede deducir que es imperativo incluir cabeceras de la misma biblioteca con comillas. De esta forma se puede asegurar que las cabeceras de una biblioteca se incluyan entre si aunque haya otros con el mismo nombre en uno de los directorios especificados en la línea de comandos.

Además, incluir con comillas puede dar al programador un significado adicional: que este fichero está bajo la custodia de mi equipo de desarrollo. Las cabeceras incluidas con paréntesis angulares son de bibliotecas de terceros. Los primeros ficheros puedo modificar si hace falta, los segundos no.






b) Investiga el uso de static en la definición de variables externas de funciones.c.
El modificador "static" trae confusiones porque se puede utilizar en varios contextos en C y C++. Podemos declarar estáticas funciones y métodos. Variables pueden estar estáticas dentro de funciones, métodos, clases y a nivel global, es decir, por todas partes.

Variables estáticas locales
Lo más común es declarar una variable local estática:

void mi_funcion_o_metodo(void)

{
    static int var_estatica = 4;
}


El valor de la variable var_estatica no se pierde aunque ya no se encuentre dentro del alcance, es decir, cuando el programa haya salido de la función en que la variable fue definida. Esto diferencia una variable estática de una variable no estática, cuyo valor se pierde al final de la función.

Debido a esta diferencia, las variables estaticas no se guardan en el stack sino en una memoria especial para variables estáticas. Aunque no sean accesibles durante toda la ejecución del programa, las variables estáticas existen durante toda la ejecución del programa.



Investiga sobre LAPACK, BLAS y ATLAS y la subrutina de Fortran dgemm y reporta sobre esta investigación que realizas. Es una investigación corta que contiene principalmente una descripción sobre los paquetes anteriores y la subrutina.


DGEMM - Double precision GEneral Matrix Matrix. Es una rutina que realiza calculos de matrices. En documentacion dice que computa multiplicacion de matriz-matriz con matrices generales.


El software LAPACK (Linear Algebra Package) es una colección de subrutinas escritas en FORTRAN 77 que
sirve para resolver los problemas matemáticos más comunes que surgen a partir del modelamiento
matemático y que se enmarcan en el campo de álgebra lineal numérica. Las subrutinas de LAPACK se basan
en unas subrutinas más sencillas que se conocen por la sigla BLAS (Basic Linear Algebra Subprograms). 


BLAS son las siglas de "Basic Linear Algebra Subroutines". Como su nombre lo indica, éste contiene subprogramas para operaciones básicas con vectores y matrices. BLAS fue diseñado para ser usado como un tabique dentro de otros códigos, por ejemplo en LAPACK.

ATLAS es una biblioteca de software de álgebra lineal (Automatically Tuned Linear Algebra Software) . Proporciona un maduro de código abierto implementación de BLAS API para C y Fortran77 .

ATLAS se recomienda a menudo como una forma de generar automáticamente un optimizado biblioteca BLAS.



REFERENCIAS:

http://publicaciones.eafit.edu.co/index.php/cuadernos-investigacion/article/download/1337/1208

https://en.wikipedia.org/wiki/Automatically_Tuned_Linear_Algebra_Software




